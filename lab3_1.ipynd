#  Лабораторна робота №3
### практичне завдання 1 
***
## Словники - Dictionary

__Словник__ - це _послідовна_ структура даних, кожний елемент якої є парою "__ключ : зачення__" (key-value) та записується в фігурних дужках через кому:

slovnik = {key1:value1, key2:value2, ... keyN:valueN}


<pre>slovnik = {int_num : 123,
           stroka: "John",
           some_list:[1,2,3],
           "const":100}</pre>

[Докладніше про словники в Python](https://devpractice.ru/python-lesson-9-dict/)
__Способи створення словників__
1. статичний
2. фунціональний
# в першому випадку змінній присвоюється заздалегідь визначена структура:

name="some_key"
some_value = "Smith"

static_slovnik = {
           "int_num" : 123,
           "stroka": "John",
           "some_list" : [1,2,3],
           "const" : 100,
           100 : 12,
           name : some_value}

# ВАЖЛИВО! ключі - повинні бути заздалегідь визначеними константами

static_slovnik

# в другому випадку пари 'ключ-значення' передаються 
# в функцію-конструктор `dict`: де 'ключ' - параметр, який отримає 'значення'

func_slovnik = dict(int_num = 123,
                    stroka = "John",
                    some_list = [1,2,3],
                    const = 100,
                    name = some_value) 

# ВАЖЛИВО! ім'я параметра стає іменем ключа у вигляді строки!

func_slovnik

# пустий словник
empty_dict = {}

# або
empty_dict_1 = dict()

#### словник, як і список - є _змінним_ обїєктом

print(empty_dict, id(empty_dict))
print(empty_dict_1, id(empty_dict_1))

l = []
l1 = list()
print (l, id(l))
print (l1, id(l1))

на відмінність від  кортежів:

k = ()
k1 = tuple()
print (k, id(k))
print (k1, id(k1))
<dir style="background-color: cyan">
<b>Словник</b> - це <i>масив</i>/список індексами якого є <b>хеш-значення</b>. 

Такий масив ще називають <i>асоціативним масивом</i> чи <i>хеш-таблицей</i>
</dir>

d = {"John"  : "US, New York",
     "Vovan" : "RU, Muxosransk",
     "Me"    : "a"}
     
   for k, v in d.items():
    print("key=", k, '\t', "value=",v)
    
 l = ["NY, Broadway 1", 
     "RU, Muxosransk"]
     
 for i, v in enumerate(l):
    print("index=", i, '\t', "value=",v)
    
 #### принцип створення хеш-значень (хеш функція)

[прочитати про хеш-функції](http://ruslan.rv.ua/python-essential/methodologies/hash/)

print(dir(__builtins__))

d, id(d), id('John'), id(d['Me']), id("a")

h = hash('John')

h, bin(h)

h & 1_000_000_000

memoryview('John'.encode())

#### операції з словниками

# словники будуть рівними якщо УСІ пари 'ключ-значення рівні'

d1 = {"k1" : 1, "k2" : 2 }
d2 = dict(k1 = 1, k2 = 2)
print(d1 == d2)

# ВАЖЛИВО! словники не можна перевіряти на 'більш-менш'

print('== ', d1 == d2)
# але:
print('is ', d1 is d2)  # оператор 'is' порівнює 'id'

print(dir(dict))

#### доступ до елементів словника

print(d1, end = '\t')
print ("k1 = ", d1['k1'])

d1['k1'] = "John"
print(d1)

d1['k3'] = "Smith"
print(d1)

#### функції для роботи з словниками

# методи (функції) притаманні виключно словникам
print(dir(dict))

# вивід усіх ключів словника
d1.keys()

# вивід усіх значень словника
d1.values()

# вивід усіх пар 'ключ-значення' у вигляді списка кортежів
d1.items()

# видалення елемента словника по ключу 
d1.pop("k1", "ключ не знайден")

## Множини

__множина__ - це об'єкт(тип) Python, який містить послідовність унікальних (такі, які не повторюються) елементів _незмінного_ (такого, який має __хеш__) типу (str, int, ...) 

<pre>
m = {1, '1', -3.14, True, None, (1,2,3) }
</pre>

множини є __змінними__ об'єктами

[Докладніше про множини в Python](https://pythonworld.ru/tipy-dannyx-v-python/mnozhestva-set-i-frozenset.html)

# Створити множник можна так 
m = {1, 2}

# або через функцію-конструктор
m = set([1, 2])

print(type(m))

m = {1, 2}
print(m, id(m))
m.add(3)
print(m, id(m))

k = (1, 2)
print(k, id(k))
k += (3,)
print(k, id(k))

#### операції та функції роботи з множинами
print(dir(m))

l = [3, 2, 44, 765]
set_l = set(l)
print(set_l)

d = dict(a=3, b=1, c=2)
set_d = set(d)
print(set_d)

s = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi auctor eros eu leo ultrices suscipit. Nulla facilisi"
set_s = set(s)
print(set_s)

a = {1, 2, 3, 4}
b = {2, 4, 5}

c = a.difference(b)    # різниця
d = a.union(b)         # об'єднання
e = a.intersection(b)  # перетин

print(c, d, e)

c = b.difference(a)
d = b.union(a)
e = b.intersection(a)

print(c, d, e)

## ТЕСТОВА ЧАСТИНА

<p style="color:red"> разкоментуйте (уберіть '#') перший рядок (<b>#!!pip ...</b>) в наступному кодовому рядку і запустить рядок на виконання (може зайняти деякий час!)</p>

!!pip install otter-grader
import otter
grader = otter.Notebook()

#### виконуйте завдання послідовно вписуючи на відведених місцях (...) свій код та перевіряйте  код запускаючи  'grader.check()'

__Завдання 1__ 
1. створити пустий словник з ім'ям 'my_info'
2. додати в словник наступні елементи
  - своє ім'я (ключ = __name__)
  - своє прізвище (ключ = __surname__)
  - свій рік народження (ключ = __year_of_birth__)
  - місяць народження (ключ = __month_of_birth__) як __число__
<!--
BEGIN QUESTION
name: q1
manual: false
points: 1
-->

my_info = {
    "name" : "Sofiya",
    "surname" : "Grishko",
    "year_of_birthday" : 2004,
    "month_of_birthday" : 9
    }
...

grader.check("q1")

__Завдання 2__ 
1. Змінити поле __month_of_birth__ в словнику __my_info__ на назву місяця
<!--
BEGIN QUESTION
name: q2
manual: false
points: 1
-->

my_info = {
   "name" : "Sofiya",
    "surname" : "Grishko",
    "year_of_birthday" : 2004,
    "month_of_birthday" : 9 
}

new_info = {"month_of_birth" : "Septeber"}
my_info.update(new_info)
print (my_info)

grader.check("q2")

__Завдання 3__ 
1. Зробити копію словника 'my_info' з ім'ям 'my_info_long'
2. Додати в словник 'my_info_long' наступні поля і значення
    - __'name_of_university'__ (текстове)
    - __'faculty'__ (текстове)
    - __'course'__ (числове)
    - __'group'__ (текстове)
    - __'budget'__(логічне)
<!--
BEGIN QUESTION
name: q3
manual: false
points: 1
-->

# --- п.1
my_info_long = {
    "name" : "Sofiya",
    "surname" : "Grishko",
    "year_of_birthday" : 2004,
    "month_of_birthday" : 9 
}

grader.check("q3")

# --- п.2
my_info_long = {
    "name_of_university" : "KNUTE",
    "faculty" : "FIT",
    "course" : 1,
    "group" : "1-14",
    "contract" : True
}
my_info.update(my_info_update)

print(my_info)

grader.check("q4")

__Завдання 4__ 


Написати код, який знаходить спільні значення в множині  __set_a__ та __set_b__


<!--
BEGIN QUESTION
name: q5
manual: false
points: 1
-->

set_a = {11, 14, 5, 12, 16, 44, 8}
set_b = {22, 14, 4, 15, 8}

set_c = set_a.intersection(set_b)
print (set_c)

grader.check("q5")


__Завдання 5__ 

Підрахувати кількість __унікальних__ символів в тексті

<!--
BEGIN QUESTION
name: q6
manual: false
points: 1
-->

some_text = """Lorem ipsum dolor sit amet, consectetur adipiscing elit. 
Morbi auctor eros eu leo ultrices suscipit. 
Nulla facilisi. Fusce a cursus lectus. Sed erat erat, ultrices."""

set_some_text = set(some_text)
print (set_some_text)
...
kol_uniq_symb = len(set_some_text)
print(kol_uniq_symb)

grader.check("q6")

<h3 style="color:red"> Наступні рядки виконувати не треба (це для викладача)
</h3>

---

To double-check your work, the cell below will rerun all of the autograder tests.

grader.check_all()

## Submission

Make sure you have run all cells in your notebook in order before running the cell below, so that all images/graphs appear in the output. The cell below will generate a zip file for you to submit. **Please save before exporting!**

# Save your notebook first, then run this cell to export your submission.
grader.export("lab_
